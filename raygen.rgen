#version 460
#extension GL_EXT_ray_tracing : require


struct ray
{
	vec4 direction;// = vec3(0.0);
	vec4 origin;// = vec3(0.0);
	bool in_use;// = false;
	int level;// = 0;
	bool reflected_ray;
};

const int level_cutoff = 10;
const int buffer_size = 128;
ray rays[buffer_size];



layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	vec4 lightPos;
} cam;


struct RayPayload {
	vec3 color;
	float distance;
	vec3 normal;
	float reflector;
	float opacity;
};

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

// Max. number of recursion is passed via a specialization constant
layout (constant_id = 0) const int MAX_RECURSION = 0;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz / target.w), 0);

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	vec3 base_color = vec3(0.0);
	vec3 reflected_color = vec3(0.0);
	vec3 refracted_color = vec3(0.0);

	float base_reflectivity = 0.0;

	for(int i = 0; i < 31; i++)
	{
		rays[i].direction = vec4(0.0);
		rays[i].origin = vec4(0.0);
		rays[i].in_use = false;
		rays[i].level = 0;
		rays[i].reflected_ray = false;
	}

	rays[0].direction = direction;
	rays[0].origin = origin;
	rays[0].in_use = true;
	rays[0].level =	1;
	rays[0].reflected_ray = true;
	
	while(true)
	{
		int count = 0;

		for(int i = 0; i < 31; i++)
		{
			if(rays[i].in_use)
			{
				count++;

				traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, rays[i].origin.xyz, tmin, rays[i].direction.xyz, tmax, 0);
				const vec4 hitPos = rays[i].origin + rays[i].direction * rayPayload.distance;

				if(rays[i].level == 1)
				{
					rays[i].level++;
					base_color = rayPayload.color;
					base_reflectivity = rayPayload.reflector;
				}
				else
				{
					rays[i].level++;
					
					if(rays[i].level >= level_cutoff)
					{
						rays[i].in_use = false;
						continue;
					}

					if(rays[i].reflected_ray == true)
						reflected_color += rayPayload.color;
					else
						refracted_color += rayPayload.color;
				}

				// hit the wall
				if(rayPayload.distance == -1.0)
				{
					rays[i].in_use = false;
					continue;
				}

				// entering
				if(dot(rays[i].direction.xyz, rayPayload.normal) <= 0.0)
				{
					rays[i].origin.xyz = hitPos.xyz + rayPayload.normal * 0.01f;

					rays[i].direction.xyz = reflect(rays[i].direction.xyz, rayPayload.normal);
					rays[i].reflected_ray = true;
				
				}
				// exiting
				else
				{
					rays[i].origin.xyz = hitPos.xyz + rayPayload.normal * 0.01f;
					rays[i].reflected_ray = false;
					//rays[i].direction.xyz = reflect(rays[i].direction.xyz, rayPayload.normal);			
				}
			}
		}

		if(count == 0)
		{
			break;
		}


	}

	vec3 color = mix(base_color, reflected_color, base_reflectivity);// + wall_color;//color + wall_color;

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
